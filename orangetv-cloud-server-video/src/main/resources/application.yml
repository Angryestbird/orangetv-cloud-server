server:
  port: 9300

eureka:
  instance:
    hostname: ${HOSTNAME:localhost}
  client:
    serviceUrl:
      defaultZone: http://${EUREKA_HOST:localhost}:8761/eureka/

spring:
  application:
    name: @name@
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST:localhost}:3306/orangetv
    username: user
    password: pass
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${OUTER_HOST:localhost}:9500
      client:
        registration:
          orangetv-cloud-server-video:
            provider: spring
            client-name: Orange Cloud TV
            client-id: orangetv-cloud-server-video
            client-secret: orangetv-cloud-server-video
            authorization-grant-type: client_credentials
            scope: openid,gateway.metadata.read,gateway.metadata.write
        provider:
          spring:
            issuer-uri: http://${OUTER_HOST:localhost}:9500
  kafka:
    bootstrap-servers: kafka:9092,host.docker.internal:9095
    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
  sql:
    init:
      username: root
      password: example
      schema-locations: classpath:schema-mysql.sql
      mode: always

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
    #    org.springframework.boot.autoconfigure:
    com.orangetv.cloud.videostore.mapper: TRACE

management:
  endpoints:
    web:
      exposure:
        include: health,info

orangetv:
  video-repo-id: 0
  video-repo-url: ${REPO_URL:http://localhost:9090}
  video-scan-path: ${SCAN_PATH:D:\Video\videocache}
  video-scan-suffixes: .mp4,.MP4.mkv,.MKV,.m4v
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
